/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.librairy.service.learner.facade.model;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Corpus extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Corpus\",\"namespace\":\"org.librairy.service.learner.facade.model\",\"fields\":[{\"name\":\"size\",\"type\":\"int\"},{\"name\":\"updated\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private int size;
   private java.lang.String updated;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Corpus() {}

  /**
   * All-args constructor.
   */
  public Corpus(java.lang.Integer size, java.lang.String updated) {
    this.size = size;
    this.updated = updated;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return size;
    case 1: return updated;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: size = (java.lang.Integer)value$; break;
    case 1: updated = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'size' field.
   */
  public java.lang.Integer getSize() {
    return size;
  }

  /**
   * Sets the value of the 'size' field.
   * @param value the value to set.
   */
  public void setSize(java.lang.Integer value) {
    this.size = value;
  }

  /**
   * Gets the value of the 'updated' field.
   */
  public java.lang.String getUpdated() {
    return updated;
  }

  /**
   * Sets the value of the 'updated' field.
   * @param value the value to set.
   */
  public void setUpdated(java.lang.String value) {
    this.updated = value;
  }

  /** Creates a new Corpus RecordBuilder */
  public static org.librairy.service.learner.facade.model.Corpus.Builder newBuilder() {
    return new org.librairy.service.learner.facade.model.Corpus.Builder();
  }
  
  /** Creates a new Corpus RecordBuilder by copying an existing Builder */
  public static org.librairy.service.learner.facade.model.Corpus.Builder newBuilder(org.librairy.service.learner.facade.model.Corpus.Builder other) {
    return new org.librairy.service.learner.facade.model.Corpus.Builder(other);
  }
  
  /** Creates a new Corpus RecordBuilder by copying an existing Corpus instance */
  public static org.librairy.service.learner.facade.model.Corpus.Builder newBuilder(org.librairy.service.learner.facade.model.Corpus other) {
    return new org.librairy.service.learner.facade.model.Corpus.Builder(other);
  }
  
  /**
   * RecordBuilder for Corpus instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Corpus>
    implements org.apache.avro.data.RecordBuilder<Corpus> {

    private int size;
    private java.lang.String updated;

    /** Creates a new Builder */
    private Builder() {
      super(org.librairy.service.learner.facade.model.Corpus.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.librairy.service.learner.facade.model.Corpus.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.size)) {
        this.size = data().deepCopy(fields()[0].schema(), other.size);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.updated)) {
        this.updated = data().deepCopy(fields()[1].schema(), other.updated);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Corpus instance */
    private Builder(org.librairy.service.learner.facade.model.Corpus other) {
            super(org.librairy.service.learner.facade.model.Corpus.SCHEMA$);
      if (isValidValue(fields()[0], other.size)) {
        this.size = data().deepCopy(fields()[0].schema(), other.size);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.updated)) {
        this.updated = data().deepCopy(fields()[1].schema(), other.updated);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'size' field */
    public java.lang.Integer getSize() {
      return size;
    }
    
    /** Sets the value of the 'size' field */
    public org.librairy.service.learner.facade.model.Corpus.Builder setSize(int value) {
      validate(fields()[0], value);
      this.size = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'size' field has been set */
    public boolean hasSize() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'size' field */
    public org.librairy.service.learner.facade.model.Corpus.Builder clearSize() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'updated' field */
    public java.lang.String getUpdated() {
      return updated;
    }
    
    /** Sets the value of the 'updated' field */
    public org.librairy.service.learner.facade.model.Corpus.Builder setUpdated(java.lang.String value) {
      validate(fields()[1], value);
      this.updated = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'updated' field has been set */
    public boolean hasUpdated() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'updated' field */
    public org.librairy.service.learner.facade.model.Corpus.Builder clearUpdated() {
      updated = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Corpus build() {
      try {
        Corpus record = new Corpus();
        record.size = fieldSetFlags()[0] ? this.size : (java.lang.Integer) defaultValue(fields()[0]);
        record.updated = fieldSetFlags()[1] ? this.updated : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
