/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.librairy.service.learner.facade.model;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Hyperparameters extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Hyperparameters\",\"namespace\":\"org.librairy.service.learner.facade.model\",\"fields\":[{\"name\":\"alpha\",\"type\":\"double\",\"default\":0.1},{\"name\":\"beta\",\"type\":\"double\",\"default\":0.001},{\"name\":\"topics\",\"type\":\"int\",\"default\":5},{\"name\":\"wordsPerTopic\",\"type\":\"int\",\"default\":20},{\"name\":\"iterations\",\"type\":\"int\",\"default\":1000}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private double alpha;
   private double beta;
   private int topics;
   private int wordsPerTopic;
   private int iterations;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Hyperparameters() {}

  /**
   * All-args constructor.
   */
  public Hyperparameters(java.lang.Double alpha, java.lang.Double beta, java.lang.Integer topics, java.lang.Integer wordsPerTopic, java.lang.Integer iterations) {
    this.alpha = alpha;
    this.beta = beta;
    this.topics = topics;
    this.wordsPerTopic = wordsPerTopic;
    this.iterations = iterations;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return alpha;
    case 1: return beta;
    case 2: return topics;
    case 3: return wordsPerTopic;
    case 4: return iterations;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: alpha = (java.lang.Double)value$; break;
    case 1: beta = (java.lang.Double)value$; break;
    case 2: topics = (java.lang.Integer)value$; break;
    case 3: wordsPerTopic = (java.lang.Integer)value$; break;
    case 4: iterations = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'alpha' field.
   */
  public java.lang.Double getAlpha() {
    return alpha;
  }

  /**
   * Sets the value of the 'alpha' field.
   * @param value the value to set.
   */
  public void setAlpha(java.lang.Double value) {
    this.alpha = value;
  }

  /**
   * Gets the value of the 'beta' field.
   */
  public java.lang.Double getBeta() {
    return beta;
  }

  /**
   * Sets the value of the 'beta' field.
   * @param value the value to set.
   */
  public void setBeta(java.lang.Double value) {
    this.beta = value;
  }

  /**
   * Gets the value of the 'topics' field.
   */
  public java.lang.Integer getTopics() {
    return topics;
  }

  /**
   * Sets the value of the 'topics' field.
   * @param value the value to set.
   */
  public void setTopics(java.lang.Integer value) {
    this.topics = value;
  }

  /**
   * Gets the value of the 'wordsPerTopic' field.
   */
  public java.lang.Integer getWordsPerTopic() {
    return wordsPerTopic;
  }

  /**
   * Sets the value of the 'wordsPerTopic' field.
   * @param value the value to set.
   */
  public void setWordsPerTopic(java.lang.Integer value) {
    this.wordsPerTopic = value;
  }

  /**
   * Gets the value of the 'iterations' field.
   */
  public java.lang.Integer getIterations() {
    return iterations;
  }

  /**
   * Sets the value of the 'iterations' field.
   * @param value the value to set.
   */
  public void setIterations(java.lang.Integer value) {
    this.iterations = value;
  }

  /** Creates a new Hyperparameters RecordBuilder */
  public static org.librairy.service.learner.facade.model.Hyperparameters.Builder newBuilder() {
    return new org.librairy.service.learner.facade.model.Hyperparameters.Builder();
  }
  
  /** Creates a new Hyperparameters RecordBuilder by copying an existing Builder */
  public static org.librairy.service.learner.facade.model.Hyperparameters.Builder newBuilder(org.librairy.service.learner.facade.model.Hyperparameters.Builder other) {
    return new org.librairy.service.learner.facade.model.Hyperparameters.Builder(other);
  }
  
  /** Creates a new Hyperparameters RecordBuilder by copying an existing Hyperparameters instance */
  public static org.librairy.service.learner.facade.model.Hyperparameters.Builder newBuilder(org.librairy.service.learner.facade.model.Hyperparameters other) {
    return new org.librairy.service.learner.facade.model.Hyperparameters.Builder(other);
  }
  
  /**
   * RecordBuilder for Hyperparameters instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Hyperparameters>
    implements org.apache.avro.data.RecordBuilder<Hyperparameters> {

    private double alpha;
    private double beta;
    private int topics;
    private int wordsPerTopic;
    private int iterations;

    /** Creates a new Builder */
    private Builder() {
      super(org.librairy.service.learner.facade.model.Hyperparameters.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.librairy.service.learner.facade.model.Hyperparameters.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.alpha)) {
        this.alpha = data().deepCopy(fields()[0].schema(), other.alpha);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.beta)) {
        this.beta = data().deepCopy(fields()[1].schema(), other.beta);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.topics)) {
        this.topics = data().deepCopy(fields()[2].schema(), other.topics);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.wordsPerTopic)) {
        this.wordsPerTopic = data().deepCopy(fields()[3].schema(), other.wordsPerTopic);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.iterations)) {
        this.iterations = data().deepCopy(fields()[4].schema(), other.iterations);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Hyperparameters instance */
    private Builder(org.librairy.service.learner.facade.model.Hyperparameters other) {
            super(org.librairy.service.learner.facade.model.Hyperparameters.SCHEMA$);
      if (isValidValue(fields()[0], other.alpha)) {
        this.alpha = data().deepCopy(fields()[0].schema(), other.alpha);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.beta)) {
        this.beta = data().deepCopy(fields()[1].schema(), other.beta);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.topics)) {
        this.topics = data().deepCopy(fields()[2].schema(), other.topics);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.wordsPerTopic)) {
        this.wordsPerTopic = data().deepCopy(fields()[3].schema(), other.wordsPerTopic);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.iterations)) {
        this.iterations = data().deepCopy(fields()[4].schema(), other.iterations);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'alpha' field */
    public java.lang.Double getAlpha() {
      return alpha;
    }
    
    /** Sets the value of the 'alpha' field */
    public org.librairy.service.learner.facade.model.Hyperparameters.Builder setAlpha(double value) {
      validate(fields()[0], value);
      this.alpha = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'alpha' field has been set */
    public boolean hasAlpha() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'alpha' field */
    public org.librairy.service.learner.facade.model.Hyperparameters.Builder clearAlpha() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'beta' field */
    public java.lang.Double getBeta() {
      return beta;
    }
    
    /** Sets the value of the 'beta' field */
    public org.librairy.service.learner.facade.model.Hyperparameters.Builder setBeta(double value) {
      validate(fields()[1], value);
      this.beta = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'beta' field has been set */
    public boolean hasBeta() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'beta' field */
    public org.librairy.service.learner.facade.model.Hyperparameters.Builder clearBeta() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'topics' field */
    public java.lang.Integer getTopics() {
      return topics;
    }
    
    /** Sets the value of the 'topics' field */
    public org.librairy.service.learner.facade.model.Hyperparameters.Builder setTopics(int value) {
      validate(fields()[2], value);
      this.topics = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'topics' field has been set */
    public boolean hasTopics() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'topics' field */
    public org.librairy.service.learner.facade.model.Hyperparameters.Builder clearTopics() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'wordsPerTopic' field */
    public java.lang.Integer getWordsPerTopic() {
      return wordsPerTopic;
    }
    
    /** Sets the value of the 'wordsPerTopic' field */
    public org.librairy.service.learner.facade.model.Hyperparameters.Builder setWordsPerTopic(int value) {
      validate(fields()[3], value);
      this.wordsPerTopic = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'wordsPerTopic' field has been set */
    public boolean hasWordsPerTopic() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'wordsPerTopic' field */
    public org.librairy.service.learner.facade.model.Hyperparameters.Builder clearWordsPerTopic() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'iterations' field */
    public java.lang.Integer getIterations() {
      return iterations;
    }
    
    /** Sets the value of the 'iterations' field */
    public org.librairy.service.learner.facade.model.Hyperparameters.Builder setIterations(int value) {
      validate(fields()[4], value);
      this.iterations = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'iterations' field has been set */
    public boolean hasIterations() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'iterations' field */
    public org.librairy.service.learner.facade.model.Hyperparameters.Builder clearIterations() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public Hyperparameters build() {
      try {
        Hyperparameters record = new Hyperparameters();
        record.alpha = fieldSetFlags()[0] ? this.alpha : (java.lang.Double) defaultValue(fields()[0]);
        record.beta = fieldSetFlags()[1] ? this.beta : (java.lang.Double) defaultValue(fields()[1]);
        record.topics = fieldSetFlags()[2] ? this.topics : (java.lang.Integer) defaultValue(fields()[2]);
        record.wordsPerTopic = fieldSetFlags()[3] ? this.wordsPerTopic : (java.lang.Integer) defaultValue(fields()[3]);
        record.iterations = fieldSetFlags()[4] ? this.iterations : (java.lang.Integer) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
