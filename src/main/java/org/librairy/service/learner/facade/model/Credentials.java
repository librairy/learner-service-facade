/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.librairy.service.learner.facade.model;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Credentials extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Credentials\",\"namespace\":\"org.librairy.service.learner.facade.model\",\"fields\":[{\"name\":\"user\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"password\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"apikey\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.lang.String user;
   private java.lang.String password;
   private java.lang.String apikey;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Credentials() {}

  /**
   * All-args constructor.
   */
  public Credentials(java.lang.String user, java.lang.String password, java.lang.String apikey) {
    this.user = user;
    this.password = password;
    this.apikey = apikey;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return user;
    case 1: return password;
    case 2: return apikey;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: user = (java.lang.String)value$; break;
    case 1: password = (java.lang.String)value$; break;
    case 2: apikey = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'user' field.
   */
  public java.lang.String getUser() {
    return user;
  }

  /**
   * Sets the value of the 'user' field.
   * @param value the value to set.
   */
  public void setUser(java.lang.String value) {
    this.user = value;
  }

  /**
   * Gets the value of the 'password' field.
   */
  public java.lang.String getPassword() {
    return password;
  }

  /**
   * Sets the value of the 'password' field.
   * @param value the value to set.
   */
  public void setPassword(java.lang.String value) {
    this.password = value;
  }

  /**
   * Gets the value of the 'apikey' field.
   */
  public java.lang.String getApikey() {
    return apikey;
  }

  /**
   * Sets the value of the 'apikey' field.
   * @param value the value to set.
   */
  public void setApikey(java.lang.String value) {
    this.apikey = value;
  }

  /** Creates a new Credentials RecordBuilder */
  public static org.librairy.service.learner.facade.model.Credentials.Builder newBuilder() {
    return new org.librairy.service.learner.facade.model.Credentials.Builder();
  }
  
  /** Creates a new Credentials RecordBuilder by copying an existing Builder */
  public static org.librairy.service.learner.facade.model.Credentials.Builder newBuilder(org.librairy.service.learner.facade.model.Credentials.Builder other) {
    return new org.librairy.service.learner.facade.model.Credentials.Builder(other);
  }
  
  /** Creates a new Credentials RecordBuilder by copying an existing Credentials instance */
  public static org.librairy.service.learner.facade.model.Credentials.Builder newBuilder(org.librairy.service.learner.facade.model.Credentials other) {
    return new org.librairy.service.learner.facade.model.Credentials.Builder(other);
  }
  
  /**
   * RecordBuilder for Credentials instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Credentials>
    implements org.apache.avro.data.RecordBuilder<Credentials> {

    private java.lang.String user;
    private java.lang.String password;
    private java.lang.String apikey;

    /** Creates a new Builder */
    private Builder() {
      super(org.librairy.service.learner.facade.model.Credentials.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.librairy.service.learner.facade.model.Credentials.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.user)) {
        this.user = data().deepCopy(fields()[0].schema(), other.user);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.password)) {
        this.password = data().deepCopy(fields()[1].schema(), other.password);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.apikey)) {
        this.apikey = data().deepCopy(fields()[2].schema(), other.apikey);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Credentials instance */
    private Builder(org.librairy.service.learner.facade.model.Credentials other) {
            super(org.librairy.service.learner.facade.model.Credentials.SCHEMA$);
      if (isValidValue(fields()[0], other.user)) {
        this.user = data().deepCopy(fields()[0].schema(), other.user);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.password)) {
        this.password = data().deepCopy(fields()[1].schema(), other.password);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.apikey)) {
        this.apikey = data().deepCopy(fields()[2].schema(), other.apikey);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'user' field */
    public java.lang.String getUser() {
      return user;
    }
    
    /** Sets the value of the 'user' field */
    public org.librairy.service.learner.facade.model.Credentials.Builder setUser(java.lang.String value) {
      validate(fields()[0], value);
      this.user = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'user' field has been set */
    public boolean hasUser() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'user' field */
    public org.librairy.service.learner.facade.model.Credentials.Builder clearUser() {
      user = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'password' field */
    public java.lang.String getPassword() {
      return password;
    }
    
    /** Sets the value of the 'password' field */
    public org.librairy.service.learner.facade.model.Credentials.Builder setPassword(java.lang.String value) {
      validate(fields()[1], value);
      this.password = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'password' field has been set */
    public boolean hasPassword() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'password' field */
    public org.librairy.service.learner.facade.model.Credentials.Builder clearPassword() {
      password = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'apikey' field */
    public java.lang.String getApikey() {
      return apikey;
    }
    
    /** Sets the value of the 'apikey' field */
    public org.librairy.service.learner.facade.model.Credentials.Builder setApikey(java.lang.String value) {
      validate(fields()[2], value);
      this.apikey = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'apikey' field has been set */
    public boolean hasApikey() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'apikey' field */
    public org.librairy.service.learner.facade.model.Credentials.Builder clearApikey() {
      apikey = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Credentials build() {
      try {
        Credentials record = new Credentials();
        record.user = fieldSetFlags()[0] ? this.user : (java.lang.String) defaultValue(fields()[0]);
        record.password = fieldSetFlags()[1] ? this.password : (java.lang.String) defaultValue(fields()[1]);
        record.apikey = fieldSetFlags()[2] ? this.apikey : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
